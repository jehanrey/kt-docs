---
import { type CollectionEntry, getCollection, render } from 'astro:content'
import dayjs from 'dayjs'

import { getCategorizedAuthCollection } from '@/helpers/loaders'
import Base from '@/layouts/base.astro'
import Wiki from '@/layouts/wiki.astro'
import type { NavigationItem } from '@/types'
import { categoryDisplay, type Category } from '@/wiki/authentication/constants'

export async function getStaticPaths() {
  const authEntries = await getCollection('authentication')
  return authEntries.map((entry) => {
    return {
      params: { id: entry.id },
      props: { entry },
    }
  })
}

interface Props {
  entry: CollectionEntry<'authentication'>
}

const entry = Astro.props.entry
const { Content, remarkPluginFrontmatter, headings } = await render(entry)

const { title, description } = entry.data

const lastModified = (() => {
  const commitDate = dayjs(remarkPluginFrontmatter.lastModified)
  return (commitDate.isValid() ? commitDate : dayjs()).format('D MMM YYYY')
})()

const authNavigation: Array<NavigationItem> = Object.entries(
  await getCategorizedAuthCollection()
).map(([category, entries]) => {
  return {
    display: categoryDisplay[category as Category],
    path: '/wiki/authentication',
    children: entries.map(({ id, title }) => ({
      display: title,
      route: `/wiki/authentication/${id}`,
    })),
  }
})
---

<Base title={title} description={description}>
  <Wiki
    navItems={authNavigation}
    lastModified={lastModified}
    minutesRead={remarkPluginFrontmatter.minutesRead}
    headings={headings}
  >
    <Content />
  </Wiki>
</Base>
